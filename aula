<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Aula 3D ‚Äì 15√ó5√ó3 m con QR</title>
  <style>
    html, body { margin: 0; height: 100%; background:#0b0f19; color:#eaeef6; font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; }
    #app { position: fixed; inset: 0; display: grid; grid-template-columns: 1fr 340px; }
    #canvas { position: relative; }
    #ui { border-left: 1px solid #243045; background: rgba(12,18,30,0.9); backdrop-filter: blur(4px); padding: 16px; overflow: auto; }
    h1 { font-size: 20px; margin: 0 0 8px; }
    h2 { font-size: 14px; margin: 16px 0 8px; opacity: .9 }
    .muted { opacity: .75; font-size: 12px; }
    .card { border: 1px solid #22314a; background: #111827; border-radius: 12px; padding: 12px; margin: 12px 0; }
    label { display:block; font-size: 12px; margin-bottom: 6px; opacity: .9 }
    input[type="text"] { width: 100%; border-radius: 10px; border: 1px solid #2b3b57; background: #0f1725; color: #eaeef6; padding: 10px 12px; }
    button { border: 1px solid #2b3b57; background: #0f1725; color: #eaeef6; padding: 10px 12px; border-radius: 10px; cursor: pointer; }
    button:hover { background: #142036; }
    .row { display:flex; gap:8px; align-items:center; }
    .qr { display:flex; justify-content:center; align-items:center; background:#0a1221; border:1px dashed #2b3b57; border-radius: 12px; height: 200px; }
    .pill { font-size: 11px; padding: 4px 8px; border-radius: 999px; border: 1px solid #2b3b57; background:#0f1725; display:inline-block; }
    .legend { display:grid; grid-template-columns: auto 1fr; gap:8px 12px; font-size:12px; }
    .badge { font-size:10px; border:1px solid #2b3b57; padding:2px 6px; border-radius:8px; opacity:.9 }
    a { color:#9cc3ff }
  </style>
</head>
<body>
  <div id="app">
    <div id="canvas"></div>
    <aside id="ui">
      <h1>üè´ Aula 3D (15√ó5√ó3 m)</h1>
      <div class="muted">Prototipo espacial con 25 mesas+ sillas, mesa de profesor, proyector, pantalla y armarios.</div>

      <div class="card">
        <h2>üîó C√≥digo QR (para abrir este visor)</h2>
        <div class="qr"><div id="qrcode"></div></div>
        <label for="url">URL destino</label>
        <input id="url" type="text" placeholder="https://tusitio.com/aula-3d" />
        <div class="row" style="margin-top:8px">
          <button id="btn-url-actual">Usar URL actual</button>
          <button id="btn-actualizar">Actualizar QR</button>
        </div>
        <div class="muted" style="margin-top:8px">Consejo: publica este archivo en un hosting (GitHub Pages / Netlify / tu web) y genera el QR con la URL p√∫blica.</div>
      </div>

      <div class="card">
        <h2>üéÆ Controles</h2>
        <div class="row" style="gap:6px; flex-wrap:wrap">
          <button id="btn-centrar">Centrar c√°mara</button>
          <button id="btn-paseo">Modo paseo</button>
          <span class="pill">Rotar: arrastrar</span>
          <span class="pill">Mover: bot√≥n derecho</span>
          <span class="pill">Zoom: rueda</span>
        </div>
      </div>

      <div class="card">
        <h2>üìè Medidas (metros)</h2>
        <div class="legend">
          <span class="badge">Aula</span><span>15 (largo) √ó 5 (ancho) √ó 3 (alto)</span>
          <span class="badge">Pantalla</span><span>4 √ó 2.25 (16:9) en pared frontal</span>
          <span class="badge">Mesa alumno</span><span>1.2 √ó 0.6 √ó 0.75 (alto)</span>
          <span class="badge">Silla</span><span>0.45 asiento, 0.9 respaldo</span>
          <span class="badge">Profesor</span><span>1.6 √ó 0.8 √ó 0.75 (alto)</span>
          <span class="badge">Armarios</span><span>M√≥dulos 1.0 √ó 0.6 √ó 1.8 en pared trasera</span>
        </div>
      </div>

      <div class="muted">Tema: üåå espacio (techo estrellado). Iluminaci√≥n suave con sombras.</div>
    </aside>
  </div>

  <!-- Three.js CDN -->
  <script src="https://unpkg.com/three@0.160.0/build/three.min.js"></script>
  <script src="https://unpkg.com/three@0.160.0/examples/js/controls/OrbitControls.js"></script>

  <!-- QRCode.js (incrustado, versi√≥n m√≠nima) -->
  <script>
  /*! QRCode.js v1.0.0 (c) 2016-2020 Kazuhiko Arase MIT */
  (function(){function l(a){this.mode=c.MODE_8BIT_BYTE;this.data=a}function m(a){this.totalCount=a;this.numData=a}function n(a,b){this.typeNumber=a;this.errorCorrectLevel=b;this.modules=null;this.moduleCount=0;this.dataCache=null;this.dataList=[]}var c={PAD0:236,PAD1:17,MODE_8BIT_BYTE:4,ErrorCorrectLevel:{L:1,M:0,Q:3,H:2}};l.prototype={getLength:function(){return this.data.length},write:function(a){for(var b=0;b<this.data.length;b++){var d=this.data.charCodeAt(b);128>d?a.put(d,8):(2048>d?a.put(192|d>>6,8):(a.put(224|d>>12,8),a.put(128|d>>6&63,8)),a.put(128|d&63,8))}}};m.prototype={get:function(a){return 1==((this.numData>>a&1)+1&1)},getLength:function(){return this.totalCount}};n.prototype={addData:function(a){this.dataList.push(new l(a));this.dataCache=null},isDark:function(a,b){if(0>a||this.moduleCount<=a||0>b||this.moduleCount<=b)throw Error(a+","+b);return this.modules[a][b]},getModuleCount:function(){return this.moduleCount},make:function(){this.makeImpl(!1,this.getBestMaskPattern())},makeImpl:function(a,b){this.moduleCount=4*this.typeNumber+17;this.modules=Array(this.moduleCount);for(var d=0;d<this.moduleCount;d++){this.modules[d]=Array(this.moduleCount);for(var e=0;e<this.moduleCount;e++)this.modules[d][e]=null}this.setupPositionProbePattern(0,0);this.setupPositionProbePattern(this.moduleCount-7,0);this.setupPositionProbePattern(0,this.moduleCount-7);this.setupTimingPattern();this.setupTypeInfo(a,b);this.mapData(this.createData(this.typeNumber,this.errorCorrectLevel),b)},setupPositionProbePattern:function(a,b){for(var d=-1;7>=d;d++)if(!(0>a+d||this.moduleCount<=a+d))for(var e=-1;7>=e;e++)0>b+e||this.moduleCount<=b+e||(this.modules[a+d][b+e]=0<=d&&6>=d&&(0==e||6==e)||0<=e&&6>=e&&(0==d||6==d)||2<=d&&4>=d&&2<=e&&4>=e)},getBestMaskPattern:function(){return 0},setupTimingPattern:function(){for(var a=8;a<this.moduleCount-8;a++)null==this.modules[a][6]&&(this.modules[a][6]=0==a%2),null==this.modules[6][a]&&(this.modules[6][a]=0==a%2)},setupTypeInfo:function(a,b){for(var d=c.ErrorCorrectLevel.H,e=0;15>e;e++){var f=!a&&1==(b>>e&1);8>e?this.modules[8][this.moduleCount-e-1]=f:this.modules[8][14-e]=f;8>e?this.modules[this.moduleCount-e-1][8]=f:this.modules[14-e][8]=f}},mapData:function(a){for(var b=-1,d=this.moduleCount-1,e=7,f=0,h=this.moduleCount-1;0<h;h-=2){6==h&&h--;for(var g=0;this.moduleCount>g;g++){var k=b<0?this.moduleCount-1-g:g;for(var p=0;2>p;p++)null==this.modules[k][h-p]&&(0<f?(this.modules[k][h-p]=1==((a.get(f-1)>>e&1)+1&1),f--):(this.modules[k][h-p]=!1)),0==--e&&(e=7)}}},createData:function(a){for(var b=[],d=0;d<this.dataList.length;d++){var e=this.dataList[d];b.push(4);b.push(e.getLength());for(var f=0;f<e.getLength();f++)b.push(e.data.charCodeAt(f)&255)}for(d=0;d<4;d++)b.push(0);for(;b.length%8!=0;)b.push(0);for(;b.length<Math.min(8*a*a,2956);)b.push(236,17);d=b.length;for(e=Array(d);d--;)e[d]=b[d];return new m(e.length)}};window.QRCode=function(a,b){var d="string"==typeof a?document.querySelector(a):a;this._el=d;this._qrcode=new n(10,c.ErrorCorrectLevel.H);this.makeCode=b?b:""};QRCode.prototype.makeCode=function(a){this._el.innerHTML="";this._qrcode=new n(10,c.ErrorCorrectLevel.H);this._qrcode.addData(a);this._qrcode.make();for(var b=document.createElement("div"),d=this._qrcode.getModuleCount(),e=4,f=document.createElement("canvas"),h=f.getContext("2d");;) {var g=e*d;f.width=g;f.height=g;h.fillStyle="#fff";h.fillRect(0,0,g,g);h.fillStyle="#000";for(var k=0;k<d;k++)for(var p=0;p<d;p++)this._qrcode.isDark(k,p)&&h.fillRect(k*e,p*e,e,e);break}this._el.appendChild(f)};
  })();
  </script>

  <script>
  // --- 3D SCENE ---
  const container = document.getElementById('canvas');
  const renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(container.clientWidth, container.clientHeight);
  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
  renderer.shadowMap.enabled = true;
  container.appendChild(renderer.domElement);

  const scene = new THREE.Scene();
  scene.background = new THREE.Color('#0b0f19');

  // Fog sutil para profundidad
  scene.fog = new THREE.FogExp2('#0b0f19', 0.04);

  // C√°mara
  const camera = new THREE.PerspectiveCamera(60, container.clientWidth / container.clientHeight, 0.1, 200);
  camera.position.set(10, 6, 10);

  // Controles
  const controls = new THREE.OrbitControls(camera, renderer.domElement);
  controls.target.set(0, 1.2, 0);
  controls.enableDamping = true;

  // Luces
  const hemi = new THREE.HemisphereLight(0xffffff, 0x223344, 0.6);
  scene.add(hemi);
  const dir = new THREE.DirectionalLight(0xffffff, 1.0);
  dir.position.set(6, 8, 4);
  dir.castShadow = true;
  dir.shadow.mapSize.set(1024, 1024);
  scene.add(dir);

  // Escala: 1 unidad = 1 metro
  const ROOM = { L: 15, W: 5, H: 3 };

  // Suelo
  const floorGeo = new THREE.PlaneGeometry(ROOM.L, ROOM.W);
  const floorMat = new THREE.MeshStandardMaterial({ color: 0x2a3347, roughness: 0.95, metalness: 0.0 });
  const floor = new THREE.Mesh(floorGeo, floorMat);
  floor.rotation.x = -Math.PI/2;
  floor.receiveShadow = true;
  scene.add(floor);

  // Paredes (caja hueca)
  const wallMat = new THREE.MeshStandardMaterial({ color: 0x101826, roughness: 0.9 });
  const frontWall = new THREE.Mesh(new THREE.PlaneGeometry(ROOM.W, ROOM.H), wallMat);
  frontWall.rotation.y = -Math.PI/2;
  frontWall.position.set(-ROOM.L/2, ROOM.H/2, 0);
  scene.add(frontWall);

  const backWall = new THREE.Mesh(new THREE.PlaneGeometry(ROOM.W, ROOM.H), wallMat);
  backWall.rotation.y = Math.PI/2;
  backWall.position.set(ROOM.L/2, ROOM.H/2, 0);
  scene.add(backWall);

  const leftWall = new THREE.Mesh(new THREE.PlaneGeometry(ROOM.L, ROOM.H), wallMat);
  leftWall.position.set(0, ROOM.H/2, -ROOM.W/2);
  scene.add(leftWall);

  const rightWall = new THREE.Mesh(new THREE.PlaneGeometry(ROOM.L, ROOM.H), wallMat);
  rightWall.rotation.y = Math.PI;
  rightWall.position.set(0, ROOM.H/2, ROOM.W/2);
  scene.add(rightWall);

  // Techo con cielo estrellado
  const ceilingGeo = new THREE.PlaneGeometry(ROOM.L, ROOM.W);
  const ceilingMat = new THREE.MeshStandardMaterial({ color: 0x0c1120, roughness: 1.0 });
  const ceiling = new THREE.Mesh(ceilingGeo, ceilingMat);
  ceiling.rotation.x = Math.PI/2;
  ceiling.position.y = ROOM.H;
  ceiling.receiveShadow = false;
  scene.add(ceiling);

  // Estrellas: peque√±os puntos debajo del techo
  const stars = new THREE.Group();
  const starGeo = new THREE.SphereGeometry(0.01, 6, 6);
  const starMat = new THREE.MeshStandardMaterial({ color: 0xffffff, emissive: 0xffffff, emissiveIntensity: 0.8 });
  for (let i=0;i<200;i++){
    const s = new THREE.Mesh(starGeo, starMat);
    s.position.set((Math.random()-0.5)*ROOM.L*0.95, ROOM.H-0.05, (Math.random()-0.5)*ROOM.W*0.95);
    stars.add(s);
  }
  scene.add(stars);

  // Pantalla frontal 4 x 2.25 m
  const screenW = 4, screenH = 2.25;
  const screenMat = new THREE.MeshStandardMaterial({ color: 0xffffff, roughness: 0.6, metalness: 0 });
  const screen = new THREE.Mesh(new THREE.PlaneGeometry(screenW, screenH), screenMat);
  screen.rotation.y = -Math.PI/2;
  screen.position.set(-ROOM.L/2 + 0.01, 1.4, 0);
  scene.add(screen);

  // Proyector en techo
  const projector = new THREE.Mesh(new THREE.BoxGeometry(0.4,0.12,0.3), new THREE.MeshStandardMaterial({ color: 0xdddddd, metalness: 0.1, roughness: 0.7 }));
  projector.position.set(-ROOM.L/2 + 2.2, ROOM.H-0.25, 0);
  projector.castShadow = true;
  scene.add(projector);
  const pole = new THREE.Mesh(new THREE.CylinderGeometry(0.03,0.03,0.2, 12), new THREE.MeshStandardMaterial({ color: 0x888888 }));
  pole.position.set(projector.position.x, ROOM.H-0.1, 0);
  scene.add(pole);

  // Armarios pared trasera (m√≥dulos)
  const cabinetMat = new THREE.MeshStandardMaterial({ color: 0x263247, roughness: 0.8 });
  const cabDepth = 0.6, cabHeight = 1.8, cabWidth = 1.0;
  for (let i=0;i<Math.floor(ROOM.L / (cabWidth+0.1)); i++){
    const cab = new THREE.Mesh(new THREE.BoxGeometry(cabWidth, cabHeight, cabDepth), cabinetMat);
    const x = ROOM.L/2 - cabWidth/2 - 0.1 - i*(cabWidth+0.1);
    cab.position.set(x, cabHeight/2, -ROOM.W/2 + cabDepth/2 + 0.05);
    cab.castShadow = true; cab.receiveShadow = true;
    scene.add(cab);
  }

  // Mesa profesor
  function desk(w=1.6, d=0.8, h=0.75, color=0x3a4e6b){
    const g = new THREE.Group();
    const top = new THREE.Mesh(new THREE.BoxGeometry(w, 0.05, d), new THREE.MeshStandardMaterial({ color, roughness: 0.8 }));
    top.castShadow = true; top.receiveShadow = true; top.position.y = h;
    g.add(top);
    const legGeo = new THREE.BoxGeometry(0.06, h, 0.06);
    const legMat = new THREE.MeshStandardMaterial({ color: 0x2c3e55 });
    const legs = [
      [-w/2+0.08, h/2, -d/2+0.08], [w/2-0.08, h/2, -d/2+0.08],
      [-w/2+0.08, h/2, d/2-0.08], [w/2-0.08, h/2, d/2-0.08]
    ];
    legs.forEach(p=>{ const leg = new THREE.Mesh(legGeo, legMat); leg.position.set(...p); leg.castShadow = true; g.add(leg); });
    return g;
  }

  function chair(){
    const g = new THREE.Group();
    const seatH = 0.45;
    const seat = new THREE.Mesh(new THREE.BoxGeometry(0.45, 0.04, 0.45), new THREE.MeshStandardMaterial({ color: 0x32435e }));
    seat.position.y = seatH; seat.castShadow = true; g.add(seat);
    const back = new THREE.Mesh(new THREE.BoxGeometry(0.45, 0.45, 0.04), new THREE.MeshStandardMaterial({ color: 0x2a3850 }));
    back.position.set(0, seatH+0.225, -0.2);
    back.castShadow = true; g.add(back);
    const legGeo = new THREE.CylinderGeometry(0.02,0.02, seatH, 8);
    const legMat = new THREE.MeshStandardMaterial({ color: 0x7788aa });
    [[-0.2, seatH/2, -0.2], [0.2, seatH/2, -0.2], [-0.2, seatH/2, 0.2], [0.2, seatH/2, 0.2]].forEach(p=>{ const l = new THREE.Mesh(legGeo, legMat); l.position.set(...p); l.castShadow = true; g.add(l); });
    return g;
  }

  function studentDesk(){
    const g = new THREE.Group();
    const t = desk(1.2, 0.6, 0.75, 0x3d5676);
    g.add(t);
    const c = chair();
    c.position.set(0, 0, 0.45);
    g.add(c);
    return g;
  }

  // Distribuci√≥n de 25 mesas (5√ó5) orientadas a la pantalla
  const rows = 5, cols = 5;
  const marginFront = 1.0, marginBack = 1.0, marginSides = 0.5;
  const usableL = ROOM.L - marginFront - marginBack; // 13 m
  const usableW = ROOM.W - marginSides*2;            // 4 m
  const stepL = usableL / rows;  // ~2.6 m
  const stepW = usableW / cols;  // 0.8 m

  for (let r=0; r<rows; r++){
    for (let c=0; c<cols; c++){
      const sd = studentDesk();
      const x = -ROOM.L/2 + marginFront + stepL*(r+0.5);
      const z = -ROOM.W/2 + marginSides + stepW*(c+0.5);
      sd.position.set(x, 0, z);
      sd.traverse(o=>{ if(o.isMesh){ o.castShadow = true; o.receiveShadow = true; }});
      scene.add(sd);
    }
  }

  // Mesa del profesor frente a la pantalla
  const teacher = desk(1.6, 0.8, 0.75, 0x4a678e);
  teacher.position.set(-ROOM.L/2 + 1.8, 0, 0);
  scene.add(teacher);

  // Eje visual hacia la pantalla
  const guide = new THREE.GridHelper(ROOM.L, ROOM.L, 0x1f2a40, 0x1a2438);
  guide.rotation.y = Math.PI/2; // l√≠neas a lo largo del largo
  guide.position.y = 0.01;
  scene.add(guide);

  // Animaci√≥n
  function animate(){
    controls.update();
    renderer.render(scene, camera);
    requestAnimationFrame(animate);
  }
  animate();

  function onResize(){
    const w = container.clientWidth;
    const h = container.clientHeight;
    renderer.setSize(w, h);
    camera.aspect = w/h; camera.updateProjectionMatrix();
  }
  window.addEventListener('resize', onResize);
  onResize();

  // UI botones
  document.getElementById('btn-centrar').onclick = () => {
    camera.position.set(6, 5, 8);
    controls.target.set(0, 1.2, 0);
  };
  let walking = false;
  document.getElementById('btn-paseo').onclick = () => { walking = !walking; };

  // Paseo simple (oscilaci√≥n lenta)
  let t=0; const base = camera.position.clone();
  (function walk(){
    if (walking){ t += 0.002; camera.position.x = Math.cos(t)*8; camera.position.z = Math.sin(t)*6; }
    requestAnimationFrame(walk);
  })();

  // --- QR ---
  const qre = new QRCode('#qrcode');
  const urlInput = document.getElementById('url');
  const btnUseCurrent = document.getElementById('btn-url-actual');
  const btnUpdate = document.getElementById('btn-actualizar');

  btnUseCurrent.onclick = () => { urlInput.value = window.location.href; qre.makeCode(urlInput.value); };
  btnUpdate.onclick = () => { const u = urlInput.value.trim(); if(u) qre.makeCode(u); };
  // Inicial: si hay URL actual, √∫sala
  urlInput.value = window.location.href;
  qre.makeCode(urlInput.value);
  </script>
</body>
</html>
